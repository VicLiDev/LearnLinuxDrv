学习驱动开发的所有demo示例
1.直接执行make指令可以生成kdemo.ko文件
2.执行 make init 可以加载模块
3.执行 make test 可以进行测试
4.执行 make exit 可以卸载模块



不同的平台，可能需要处理如下补丁的问题

diff --git a/0.mDemo/1.base/kDemo.c b/0.mDemo/1.base/kDemo.c
index a9ffb76..505c0c0 100644
--- a/0.mDemo/1.base/kDemo.c
+++ b/0.mDemo/1.base/kDemo.c
@@ -155,7 +155,7 @@ static struct class *m_chrdev_class = NULL;
 // array of m_chr_device_data for
 static struct m_chr_device_data m_chrdev_data[MAX_DEV];
 
-static int m_chrdev_uevent(struct device *dev, struct kobj_uevent_env *env)
+static int m_chrdev_uevent(const struct device *dev, struct kobj_uevent_env *env)
 {
     add_uevent_var(env, "DEVMODE=%#o", 0666);
     return 0;
@@ -258,7 +258,7 @@ static int __init m_chr_init(void)
     // create sysfs class
     // 创建设备节点的时候也用到了class，因此在/sys/class/m_chrdev_cls下可以看到
     // 链接到设备的软链接
-    m_chrdev_class = class_create(THIS_MODULE, "m_chrdev_cls");
+    m_chrdev_class = class_create("m_chrdev_cls");
     m_chrdev_class->dev_uevent = m_chrdev_uevent;
 
     // Create necessary number of the devices



wait queue 等待队列

等待队列是Linux内核提供的一种同步机制，它允许进程在某个条件不满足时挂起（睡眠），
直到条件满足或者被信号唤醒。

等待队列机制主要包括以下函数和宏：
* wait_event_interruptible:  
  这个宏允许进程在等待时被信号中断。如果进程在等待过程中接收到信号（例如，用户
  按下Ctrl+C），它会从等待状态中被唤醒，并且宏返回一个错误码（通常是 -ERESTARTSYS）。
  使用 wait_event_interruptible 的进程在等待时会释放CPU，并且可以被其他进程抢占。
* wait_event:  
  这个宏不允许进程在等待时被信号中断。即使进程接收到信号，它也会继续等待，直到条件
  满足或者被其他方式唤醒。
  使用 wait_event 的进程在等待时会释放CPU，但不会被信号中断。
* wake_up: 唤醒等待队列中的所有进程。
* wake_up_interruptible: 唤醒等待队列中所有可中断等待的进程。

等待队列通常用于设备驱动程序中，例如，当设备驱动需要等待硬件事件（如中断）或者资源
就绪时，就会使用等待队列。进程可以放入等待队列中，然后在某个条件得到满足时被唤醒。

等待队列机制是一种有效的同步手段，特别是在需要处理硬件事件或者需要响应信号的情况下。
它允许进程在等待时释放CPU，从而提高系统的整体性能。
